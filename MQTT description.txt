Project Title:

IoT-Based Temperature and Humidity Monitoring using ESP8266 and MQTT Protocol

Project Description:

This project demonstrates how to connect an IoT device — the NodeMCU (ESP8266) — to the cloud using the MQTT (Message Queuing Telemetry Transport) protocol.
The system reads temperature and humidity data from a DHT11 sensor and transmits it wirelessly to a public MQTT broker in real time. This allows users or 
remote applications to subscribe to the data stream and monitor environmental conditions from anywhere in the world.

MQTT is a lightweight, publish-subscribe communication protocol designed specifically for low-power, low-bandwidth IoT devices. 
Unlike REST APIs, where each data exchange involves a separate HTTP request and response, MQTT keeps a continuous connection open between the device and the broker,
enabling instant, bi-directional communication with minimal overhead.

In this project, the ESP8266 acts as an MQTT client that:

Connects to a Wi-Fi network.

Establishes a connection with the public MQTT broker hosted by HiveMQ (broker.hivemq.com).

Publishes the DHT11 sensor readings to a specific topic (e.g., nodemcu/sensors).

Optionally listens (subscribes) to another topic (nodemcu/commands) for remote control messages or configuration commands.

On the cloud side, any user or dashboard connected to the same broker can subscribe to the topic to receive the data in 
real time — no need for constant polling or HTTP requests. The HiveMQ Web Client is used here to visualize the incoming data, 
providing a clear demonstration of the publish-subscribe mechanism in action.


Components Required:

NodeMCU (ESP8266) Wi-Fi microcontroller

DHT11 Temperature and Humidity Sensor

Jumper Wires

USB Cable for programming and power

Computer with Arduino IDE

Internet connection


Working Principle:

The ESP8266 connects to a Wi-Fi network and initializes the MQTT client.

The DHT11 sensor measures ambient temperature and humidity values.

The data is formatted into a simple JSON string, e.g.:

{ "temperature": 31.5, "humidity": 60.0 }


This JSON data is published to the MQTT broker at the topic nodemcu/sensors.

Any device or dashboard subscribed to this topic immediately receives the latest data.

Optionally, the ESP8266 can also subscribe to nodemcu/commands to receive control messages from the cloud.



Technical Details:

Protocol: MQTT (Message Queuing Telemetry Transport)

Broker Used: HiveMQ Public Broker (broker.hivemq.com, port 1883)

Data Format: JSON

MQTT Topics:

Publish → nodemcu/sensors

Subscribe → nodemcu/commands

Libraries Used:

ESP8266WiFi.h – for Wi-Fi connectivity

PubSubClient.h – for MQTT communication

DHT.h – for sensor data acquisition



Applications:

This project forms the foundation for numerous IoT systems where real-time monitoring and communication are essential, such as:

Home automation and smart thermostats

Industrial and agricultural environmental monitoring

Data logging and analytics systems

Health and safety monitoring

Educational IoT demonstrations



Advantages:

Real-time updates: Data is delivered instantly as it changes.

Low bandwidth: MQTT is optimized for small IoT devices and weak internet connections.

Scalable: Multiple devices can publish or subscribe to the same topic.

Bidirectional: Allows both data transmission and remote control.

Open standard: Works with many free public brokers and cloud platforms.




Limitations:

Requires continuous internet connection.

The DHT11 has limited accuracy and slow response time.

Public MQTT brokers are not secure for production use (no authentication/encryption).

MQTT messages are not stored by default unless a retention policy is applied.



Future Enhancements:

Replace DHT11 with a more accurate DHT22 or BME280 sensor.

Use a secure broker (TLS/SSL) with authentication.

Add data logging and graphical dashboards using platforms like Node-RED, ThingSpeak, or AWS IoT Core.

Implement two-way control, such as turning on a fan or LED when temperature exceeds a threshold.


Summary:

This project successfully demonstrates the use of the MQTT protocol for IoT communication using a NodeMCU (ESP8266).
Sensor data from a DHT11 is published to a cloud broker and can be viewed in real time using the HiveMQ Web Client. 
The project illustrates the efficiency and flexibility of MQTT in connecting embedded systems to the internet, 
forming a strong base for building smart, connected, and scalable IoT solutions.
